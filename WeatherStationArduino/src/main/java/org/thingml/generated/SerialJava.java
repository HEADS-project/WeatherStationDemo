/**
 * File generated by the ThingML IDE
 * /!\Do not edit this file/!\
 * In case of a bug in the generated code,
 * please submit an issue on our GitHub
 **/

package org.thingml.generated;

import org.thingml.generated.api.ISerialJava_IOStream;
import org.thingml.generated.api.ISerialJava_IOStreamClient;
import org.thingml.generated.messages.Receive_bytesMessageType;
import org.thingml.generated.messages.Write_bytesMessageType;
import org.thingml.java.*;
import org.thingml.java.ext.Event;
import org.thingml.java.ext.EventType;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;

/**
 * Definition for type : SerialJava
 **/
public class SerialJava extends Component
		implements
			ISerialJava_IOStream,
			org.thingml.comm.rxtx.SerialObserver {

	private List<ISerialJava_IOStreamClient> IOStream_clients = new LinkedList<ISerialJava_IOStreamClient>();
	public void registerOnIOStream(ISerialJava_IOStreamClient client) {
		IOStream_clients.add(client);
	}

	public void unregisterFromIOStream(ISerialJava_IOStreamClient client) {
		IOStream_clients.remove(client);
	}

	@Override
	public void write_bytes_via_IOStream(
			byte[] OutputByteArrayMsgs_write_bytes_b__var) {
		receive(write_bytesType.instantiate(IOStream_port,
				OutputByteArrayMsgs_write_bytes_b__var), IOStream_port);
	}

	private void sendReceive_bytes_via_IOStream(
			byte[] InputByteArrayMsgs_receive_bytes_b__var) {
		// ThingML send
		send(receive_bytesType.instantiate(IOStream_port,
				InputByteArrayMsgs_receive_bytes_b__var), IOStream_port);
		// send to other clients
		for (ISerialJava_IOStreamClient client : IOStream_clients) {
			client.receive_bytes_from_IOStream(InputByteArrayMsgs_receive_bytes_b__var);
		}
	}

	// Attributes
	private final String SerialJava_serialPort__var;
	private org.thingml.comm.rxtx.Serial4ThingML SerialJava_serial__var;
	// Ports
	private Port IOStream_port;
	// Message types
	private final Receive_bytesMessageType receive_bytesType = new Receive_bytesMessageType();
	private final Write_bytesMessageType write_bytesType = new Write_bytesMessageType();
	// Empty Constructor
	public SerialJava() {
		super(1);
		SerialJava_serialPort__var = "COM4";
	}

	// Constructor (only readonly (final) attributes)
	public SerialJava(final String SerialJava_serialPort__var) {
		super(1);
		this.SerialJava_serialPort__var = SerialJava_serialPort__var;
	}

	// Constructor (all attributes)
	public SerialJava(String name, final String SerialJava_serialPort__var,
			final org.thingml.comm.rxtx.Serial4ThingML SerialJava_serial__var) {
		super(name, 1);
		this.SerialJava_serialPort__var = SerialJava_serialPort__var;
		this.SerialJava_serial__var = SerialJava_serial__var;
	}

	// Getters and Setters for non readonly/final attributes
	public String getSerialJava_serialPort__var() {
		return SerialJava_serialPort__var;
	}

	public org.thingml.comm.rxtx.Serial4ThingML getSerialJava_serial__var() {
		return SerialJava_serial__var;
	}

	public void setSerialJava_serial__var(
			org.thingml.comm.rxtx.Serial4ThingML SerialJava_serial__var) {
		this.SerialJava_serial__var = SerialJava_serial__var;
	}

	// Getters for Ports
	public Port getIOStream_port() {
		return IOStream_port;
	}
	private CompositeState buildSerialJava_behavior() {
		final List<AtomicState> states_SerialJava_behavior = new ArrayList<AtomicState>();
		final AtomicState state_SerialJava_behavior_default = new AtomicState(
				"default") {
			@Override
			public void onEntry() {
				{
					System.out.println("Serial port ready indeed!");
				}
			}

		};
		states_SerialJava_behavior.add(state_SerialJava_behavior_default);
		final List<Region> regions_SerialJava_behavior = new ArrayList<Region>();
		final List<Handler> transitions_SerialJava_behavior = new ArrayList<Handler>();
		transitions_SerialJava_behavior.add(new InternalTransition(
				"Handler_265604231", write_bytesType, IOStream_port,
				state_SerialJava_behavior_default) {
			@Override
			public void doExecute(final Event e) {
				final Write_bytesMessageType.Write_bytesMessage ce = (Write_bytesMessageType.Write_bytesMessage) e;
				{
					getSerialJava_serial__var().sendData(ce.b);
				}
			}

		});
		final CompositeState state_SerialJava_behavior = new CompositeState(
				"behavior", states_SerialJava_behavior,
				state_SerialJava_behavior_default,
				transitions_SerialJava_behavior, regions_SerialJava_behavior,
				false) {
			@Override
			public void onEntry() {
				{
					initSerial();
					System.out.println("Serial port ready!");
				}
				super.onEntry();
			}

			@Override
			public void onExit() {
				super.onExit();
				{
					killSerial();
					System.out.println("Serial port killed, RIP!");
				}
			}

		};
		return state_SerialJava_behavior;
	}

	public Component buildBehavior() {
		// Init ports
		final List<EventType> inEvents_IOStream = new ArrayList<EventType>();
		final List<EventType> outEvents_IOStream = new ArrayList<EventType>();
		inEvents_IOStream.add(write_bytesType);
		outEvents_IOStream.add(receive_bytesType);
		IOStream_port = new Port(PortType.PROVIDED, "IOStream",
				inEvents_IOStream, outEvents_IOStream, 0);
		// Init state machine
		behavior = buildSerialJava_behavior();
		return this;
	}

	@Override
	public void receive(byte[] SerialJava_receive_byte__var) {
		{
			sendReceive_bytes_via_IOStream((byte[]) SerialJava_receive_byte__var);
			System.out.println("");
		}
	}
	private void initSerial() {
		{
			setSerialJava_serial__var((org.thingml.comm.rxtx.Serial4ThingML) (new org.thingml.comm.rxtx.Serial4ThingML(
					getSerialJava_serialPort__var(), this)));
		}
	}
	private void killSerial() {
		{
			getSerialJava_serial__var().close();
		}
	}
}
