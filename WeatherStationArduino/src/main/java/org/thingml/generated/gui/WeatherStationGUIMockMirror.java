/**
 * File generated by the ThingML IDE
 * /!\Do not edit this file/!\
 * In case of a bug in the generated code,
 * please submit an issue on our GitHub
 **/

package org.thingml.generated.gui;

import org.thingml.generated.messages.ChangeDisplayMessageType;
import org.thingml.generated.messages.LightMessageType;
import org.thingml.generated.messages.TemperatureMessageType;
import org.thingml.generated.messages.UpdatedDisplayMessageType;
import org.thingml.java.Component;
import org.thingml.java.Port;
import org.thingml.java.PortType;
import org.thingml.java.ext.Event;
import org.thingml.java.ext.EventType;

import javax.swing.*;
import javax.swing.text.BadLocationException;
import javax.swing.text.Style;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyledDocument;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

public class WeatherStationGUIMockMirror extends Component
		implements
			ActionListener {

	// Message types
	private final TemperatureMessageType temperatureType = new TemperatureMessageType();
	private final LightMessageType lightType = new LightMessageType();
	private final ChangeDisplayMessageType changeDisplayType = new ChangeDisplayMessageType();
	private final UpdatedDisplayMessageType updatedDisplayType = new UpdatedDisplayMessageType();
	final Port port_WeatherStationGUI_gui;

	public Port getGui_port() {
		return port_WeatherStationGUI_gui;
	}

	public java.util.List<WeatherStationGUIListenerMirror> listeners = new java.util.LinkedList<WeatherStationGUIListenerMirror>();

	private SimpleDateFormat dateFormat = new SimpleDateFormat(
			"dd MMM yyy 'at' HH:mm:ss.SSS");
	private JTabbedPane tabbedPane = new JTabbedPane();
	private JFrame frame;
	private JPanel frame_gui;
	private JTextPane screen;
	private JButton clearButton;
	private StyledDocument doc;

	public WeatherStationGUIMockMirror(String name) {
		super(name, 1);
		final List<EventType> in_gui = new ArrayList<EventType>();
		final List<EventType> out_gui = new ArrayList<EventType>();
		out_gui.add(updatedDisplayType);
		in_gui.add(changeDisplayType);
		port_WeatherStationGUI_gui = new Port(PortType.REQUIRED, "gui", in_gui,
				out_gui, 0);
		init();
	}

	@Override
	public Component buildBehavior() {
		return null;
	}

	@Override
	public void receive(Event event, Port port) {
		super.receive(event, port);
		print(event.getType().getName() + "_via_" + port.getName(),
				dateFormat.format(new Date()) + ": " + event.toString());
	}

	// Attributes related to updatedDisplay via gui
	public JButton sendupdatedDisplay_via_gui;

	public JButton getSendupdatedDisplay_via_gui() {
		return sendupdatedDisplay_via_gui;
	}

	public void disableAll() {
		sendupdatedDisplay_via_gui.setEnabled(false);
	}

	public void enableAll() {
		sendupdatedDisplay_via_gui.setEnabled(true);
	}

	public void print(String id, String data) {
		try {
			doc.insertString(doc.getLength(), formatForPrint(data),
					doc.getStyle(id));
			screen.setCaretPosition(doc.getLength());
		} catch (BadLocationException ex) {
			ex.printStackTrace();
		}
	}

	public void addListener(ActionListener l) {
		sendupdatedDisplay_via_gui.addActionListener(l);
	}

	@Override
	public void start() {
	}

	private void init() {
		GridBagConstraints c = new GridBagConstraints();
		c.gridwidth = 1;
		c.fill = GridBagConstraints.HORIZONTAL;
		c.insets = new Insets(0, 3, 0, 3);
		clearButton = new JButton("Clear Console");
		c.gridy = 0;
		c.gridx = 0;
		frame = new JFrame("WeatherStationGUI Mock Simulator");
		frame.setLayout(new GridBagLayout());
		frame.add(tabbedPane, c);
		frame_gui = new JPanel();
		frame_gui.setLayout(new GridBagLayout());
		// GUI related to gui_via_gui => updatedDisplay
		c.gridy = 0;
		c.gridx = 0;
		frame_gui.add(createLabel("updatedDisplay"), c);
		c.gridy = 1;
		c.gridx = 0;
		frame_gui.add(createupdatedDisplay_via_guiPanel(), c);
		c.gridy = 2;
		c.gridx = 0;
		sendupdatedDisplay_via_gui = createSendButton("gui => updatedDisplay");
		frame_gui.add(sendupdatedDisplay_via_gui, c);
		tabbedPane.addTab("gui", frame_gui);
		c.gridy = 1;
		c.gridx = 0;
		c.gridwidth = 1;
		frame.add(createJTextPane(), c);
		c.gridy = 2;
		frame.add(clearButton, c);
		frame.pack();
		clearButton.addActionListener(this);
		addListener(this);
		frame.setVisible(true);
	}

	public static JLabel createLabel(String name) {
		return new JLabel(name);
	}

	public static JButton createSendButton(String name) {
		return new JButton("send");
	}

	public JPanel createupdatedDisplay_via_guiPanel() {
		GridBagConstraints c = new GridBagConstraints();
		c.fill = GridBagConstraints.HORIZONTAL;
		c.weightx = 0.5;
		JPanel panel = new JPanel(new GridBagLayout());
		return panel;
	}

	public JScrollPane createJTextPane() {
		screen = new JTextPane();
		screen.setFocusable(false);
		screen.setEditable(false);
		screen.setAutoscrolls(true);
		JScrollPane editorScrollPane = new JScrollPane(screen);
		editorScrollPane
				.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
		editorScrollPane.setPreferredSize(new Dimension(480, 240));
		editorScrollPane.setMinimumSize(new Dimension(320, 160));
		doc = screen.getStyledDocument();
		// Style def =
		// StyleContext.getDefaultStyleContext().getStyle(StyleContext.DEFAULT_STYLE);
		Style receivechangeDisplay_via_guiStyle = doc.addStyle(
				"changeDisplay_via_gui", null);
		StyleConstants.setBackground(receivechangeDisplay_via_guiStyle,
				new Color(133, 207, 151));
		return editorScrollPane;
	}

	private String formatForPrint(String text) {
		return (text.endsWith("\n") ? text : text + "\n");
	}

	@Override
	public void actionPerformed(ActionEvent ae) {
		if (ae.getSource() == clearButton) {
			screen.setText("");
		} else if (ae.getSource() == getSendupdatedDisplay_via_gui()) {
			send(updatedDisplayType.instantiate(port_WeatherStationGUI_gui),
					port_WeatherStationGUI_gui);
			for (WeatherStationGUIListenerMirror l : listeners)
				l.onUpdatedDisplay_via_gui();
		}
	}

	public static void main(String args[]) {
		WeatherStationGUIMock mock = new WeatherStationGUIMock(
				"WeatherStationGUI");
		WeatherStationGUIMockMirror mockMirror = new WeatherStationGUIMockMirror(
				"WeatherStationGUI_mirror");
	}
}
