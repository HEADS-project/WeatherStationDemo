/**
 * File generated by the ThingML IDE
 * /!\Do not edit this file/!\
 * In case of a bug in the generated code,
 * please submit an issue on our GitHub
 **/

package org.thingml.generated;

import org.thingml.generated.api.IWeatherStation_RemoteControlIn;
import org.thingml.generated.api.IWeatherStation_RemoteControlOutClient;
import org.thingml.generated.api.IWeatherStation_gui;
import org.thingml.generated.api.IWeatherStation_guiClient;
import org.thingml.generated.messages.ChangeDisplayMessageType;
import org.thingml.generated.messages.LightMessageType;
import org.thingml.generated.messages.TemperatureMessageType;
import org.thingml.java.*;
import org.thingml.java.ext.Event;
import org.thingml.java.ext.EventType;

import java.util.*;

/**
 * Definition for type : WeatherStation
 **/
public class WeatherStation extends Component
		implements
			IWeatherStation_RemoteControlIn,
			IWeatherStation_gui {

	/*
	 * private REST_RemoteControl_Client restClient; public static final
	 * WeatherStation instance = new WeatherStation( new
	 * REST_RemoteControl_Client());
	 * 
	 * public static WeatherStation getInstance() { return instance; }
	 */

	private Collection<IWeatherStation_guiClient> gui_clients = Collections
			.synchronizedCollection(new LinkedList<IWeatherStation_guiClient>());
	public synchronized void registerOnGui(IWeatherStation_guiClient client) {
		gui_clients.add(client);
	}

	public synchronized void unregisterFromGui(IWeatherStation_guiClient client) {
		gui_clients.remove(client);
	}

	private Collection<IWeatherStation_RemoteControlOutClient> RemoteControlOut_clients = Collections
			.synchronizedCollection(new LinkedList<IWeatherStation_RemoteControlOutClient>());
	public synchronized void registerOnRemoteControlOut(
			IWeatherStation_RemoteControlOutClient client) {
		RemoteControlOut_clients.add(client);
	}

	public synchronized void unregisterFromRemoteControlOut(
			IWeatherStation_RemoteControlOutClient client) {
		RemoteControlOut_clients.remove(client);
	}

	@Override
	public synchronized void temperature_via_RemoteControlIn(
			short RemoteMonitoringMsgs_temperature_temp__var) {
		receive(temperatureType.instantiate(RemoteControlIn_port,
				RemoteMonitoringMsgs_temperature_temp__var),
				RemoteControlIn_port);
	}

	@Override
	public synchronized void light_via_RemoteControlIn(
			short RemoteMonitoringMsgs_light_light__var) {
		receive(lightType.instantiate(RemoteControlIn_port,
				RemoteMonitoringMsgs_light_light__var), RemoteControlIn_port);
	}

	@Override
	public synchronized void changeDisplay_via_gui() {
		receive(changeDisplayType.instantiate(gui_port), gui_port);
	}

	private synchronized void sendTemperature_via_gui(
			short RemoteMonitoringMsgs_temperature_temp__var) {
		// ThingML send
		send(temperatureType.instantiate(gui_port,
				RemoteMonitoringMsgs_temperature_temp__var), gui_port);
		// send to other clients
		for (IWeatherStation_guiClient client : gui_clients) {
			client.temperature_from_gui(RemoteMonitoringMsgs_temperature_temp__var);
		}

	}

	private synchronized void sendLight_via_gui(
			short RemoteMonitoringMsgs_light_light__var) {
		// ThingML send
		send(lightType.instantiate(gui_port,
				RemoteMonitoringMsgs_light_light__var), gui_port);
		// send to other clients
		for (IWeatherStation_guiClient client : gui_clients) {
			client.light_from_gui(RemoteMonitoringMsgs_light_light__var);
		}
	}

	private synchronized void sendChangeDisplay_via_RemoteControlOut() {
		// ThingML send
		send(changeDisplayType.instantiate(RemoteControlOut_port),
				RemoteControlOut_port);
		// send to other clients
		for (IWeatherStation_RemoteControlOutClient client : RemoteControlOut_clients) {
			client.changeDisplay_from_RemoteControlOut();
		}
	}

	// Attributes
	// Ports
	private Port RemoteControlIn_port;
	private Port gui_port;
	private Port RemoteControlOut_port;
	// Message types
	private final TemperatureMessageType temperatureType = new TemperatureMessageType();
	private final LightMessageType lightType = new LightMessageType();
	private final ChangeDisplayMessageType changeDisplayType = new ChangeDisplayMessageType();
	// Empty Constructor
	public WeatherStation() {
		super(3);

		// registerOnGui(restClient);
		// this.restClient = restClient;
		// WebSocket_UI ui = null;
		/*
		 * try { ui = new WebSocket_UI(8081, this); } catch
		 * (UnknownHostException e) { e.printStackTrace(); } ui.start();
		 * this.addUIListener(ui);
		 */
		// df.setMaximumFractionDigits(2);
	}

	// Constructor (all attributes)
	public WeatherStation(String name) {
		super(name, 3);
	}

	// Getters and Setters for non readonly/final attributes
	// Getters for Ports
	public Port getRemoteControlIn_port() {
		return RemoteControlIn_port;
	}
	public Port getGui_port() {
		return gui_port;
	}
	public Port getRemoteControlOut_port() {
		return RemoteControlOut_port;
	}
	private CompositeState buildWeatherStation_SensorsDisplayImpl() {
		final List<AtomicState> states_WeatherStation_SensorsDisplayImpl = new ArrayList<AtomicState>();
		final AtomicState state_WeatherStation_SensorsDisplayImpl_Process = new AtomicState(
				"Process") {
			@Override
			public void onEntry() {
				{
					System.out.println("Weather station ready indeed");
				}
			}

		};
		states_WeatherStation_SensorsDisplayImpl
				.add(state_WeatherStation_SensorsDisplayImpl_Process);
		final List<Region> regions_WeatherStation_SensorsDisplayImpl = new ArrayList<Region>();
		final List<Handler> transitions_WeatherStation_SensorsDisplayImpl = new ArrayList<Handler>();
		transitions_WeatherStation_SensorsDisplayImpl
				.add(new InternalTransition("Handler_805927487",
						temperatureType, RemoteControlIn_port,
						state_WeatherStation_SensorsDisplayImpl_Process) {
					@Override
					public void doExecute(final Event e) {
						final TemperatureMessageType.TemperatureMessage ce = (TemperatureMessageType.TemperatureMessage) e;
						{
							System.out.println("Temperature is: " + ce.temp);
							sendTemperature_via_gui((short) ce.temp);
						}
					}

				});
		transitions_WeatherStation_SensorsDisplayImpl
				.add(new InternalTransition("Handler_1863174210", lightType,
						RemoteControlIn_port,
						state_WeatherStation_SensorsDisplayImpl_Process) {
					@Override
					public void doExecute(final Event e) {
						final LightMessageType.LightMessage ce = (LightMessageType.LightMessage) e;
						{
							System.out.println("Light is: " + ce.light);
							sendLight_via_gui((short) ce.light);
						}
					}

				});
		transitions_WeatherStation_SensorsDisplayImpl
				.add(new InternalTransition("Handler_26601976",
						changeDisplayType, gui_port,
						state_WeatherStation_SensorsDisplayImpl_Process) {
					@Override
					public void doExecute(final Event e) {
						final ChangeDisplayMessageType.ChangeDisplayMessage ce = (ChangeDisplayMessageType.ChangeDisplayMessage) e;
						{
							System.out.println("Changing Display on Arduino");
							sendChangeDisplay_via_RemoteControlOut();
						}
					}

				});
		final CompositeState state_WeatherStation_SensorsDisplayImpl = new CompositeState(
				"SensorsDisplayImpl", states_WeatherStation_SensorsDisplayImpl,
				state_WeatherStation_SensorsDisplayImpl_Process,
				transitions_WeatherStation_SensorsDisplayImpl,
				regions_WeatherStation_SensorsDisplayImpl, false) {
			@Override
			public void onEntry() {
				{
					System.out.println("Weather station ready!");
				}
				super.onEntry();
			}

		};
		return state_WeatherStation_SensorsDisplayImpl;
	}

	public Component buildBehavior() {
		// Init ports
		final List<EventType> inEvents_RemoteControlIn = new ArrayList<EventType>();
		final List<EventType> outEvents_RemoteControlIn = new ArrayList<EventType>();
		inEvents_RemoteControlIn.add(temperatureType);
		inEvents_RemoteControlIn.add(lightType);
		RemoteControlIn_port = new Port(PortType.PROVIDED, "RemoteControlIn",
				inEvents_RemoteControlIn, outEvents_RemoteControlIn, 0);
		final List<EventType> inEvents_gui = new ArrayList<EventType>();
		final List<EventType> outEvents_gui = new ArrayList<EventType>();
		inEvents_gui.add(changeDisplayType);
		outEvents_gui.add(temperatureType);
		outEvents_gui.add(lightType);
		gui_port = new Port(PortType.REQUIRED, "gui", inEvents_gui,
				outEvents_gui, 1);
		final List<EventType> inEvents_RemoteControlOut = new ArrayList<EventType>();
		final List<EventType> outEvents_RemoteControlOut = new ArrayList<EventType>();
		outEvents_RemoteControlOut.add(changeDisplayType);
		RemoteControlOut_port = new Port(PortType.PROVIDED, "RemoteControlOut",
				inEvents_RemoteControlOut, outEvents_RemoteControlOut, 2);
		// Init state machine
		behavior = buildWeatherStation_SensorsDisplayImpl();
		return this;
	}

}
