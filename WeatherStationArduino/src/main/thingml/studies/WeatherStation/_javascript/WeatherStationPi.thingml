import "../../../core/serializer.thingml"
import "../../../core/comm.thingml"
import "../../../core/_javascript/serializer.thingml"
import "../../../core/_javascript/serial.thingml"
import "../../../core/_javascript/timer.thingml"

import "../weatherAPI.thingml"

thing WeatherStation includes RemoteMonitoringMsgs, TimerClient
{    
    
    provided port RemoteControlIn 
    {
        receives temp, lux
    }
    
    /*required port gui @public "true" {
        receives changeDisplay
        sends temp, lux
    }*/
    
    provided port RemoteControlOut
    {
        sends changeDisplay
    }
    
    
    statechart SensorsDisplayImpl init Process
   	{   		
       on entry do
        print("Weather station ready!")      
       end
       
       state Process {
           
         on entry do
           timer!timer_start(3000)
         end
         
        transition -> Process
        event timer?timer_timeout
        action do
            print("Changing Display on Arduino")
            RemoteControlOut!changeDisplay()
        end
           
        internal event t : RemoteControlIn?temp
        action do
            print("Temperature is: " + t.temp)
            gui!temp(t.temp)
        end
        
        internal event l : RemoteControlIn?lux
        action do
            print("Light is: " + l.lux)
            gui!lux(l.lux)
        end
        
        internal event gui?changeDisplay
        action do
            print("Changing Display on Arduino")
            RemoteControlOut!changeDisplay()
        end            
       }
        
    }
   
}





//Generated by ThingML
thing MessageSerializer includes SerializerJS, ArraySerializer, RemoteMonitoringMsgs {
required port RemoteControl{
receives changeDisplay
}

statechart SerializerBehavior init Serialize {
    
    on entry do
        //'' & buffer & ' = new byte[16];'//needed as Kevoree only uses the empty constructor
    end
    
state Serialize{
internal event m : RemoteControl?changeDisplay action
do
setHeader(20, 0)
send()
end

}
}

}

thing MessageDeserializer includes DeserializerJS, ArraySerializer, RemoteMonitoringMsgs {
required port RemoteControl{
sends temp, lux
}

function forward() do
index = DATA_POSITION
readonly var code : Byte = buffer[CODE_POSITION]
if (code == 10) do
deserializeRemote_temperature()
end
if (code == 11) do
deserializeRemote_light()
end
end

function deserializeRemote_temperature()
do
readonly var t : UInt16 = deserializeUInt16()
RemoteControl!temp(t)
end

function deserializeRemote_light()
do
readonly var t : UInt16 = deserializeUInt16()
RemoteControl!lux(t)
end


statechart receive init Idle {
    
        on entry do
        //'' & buffer & ' = new byte[16];'//needed as Kevoree only uses the empty constructor
    end
    
state Idle {
    
internal event m : in?receive_bytes
action do
    receive(m.b)  
end
}
}

}

//END Generated by ThingML



configuration KSerialJS {
    instance serial : SerialJS
        set serial.serialPort = "COM27"
        
    instance deserializer : MessageDeserializer
    instance serializer : MessageSerializer
    instance serial : SerialJS
        set serial.serialPort = "COM27"
    
    connector deserializer.in => serial.read
    connector serializer.out => serial.write
}

configuration KWeatherNodeJS
@remote "app::.*::RemoteControl::.*"
{
    instance app : WeatherStation
    instance timer : TimerJS
    connector app.timer => timer.timer        
}


/*configuration FullWeatherStationJS
@remote "app::.*::RemoteControl::.*"
{
    instance app : WeatherStation
    instance timer : TimerJS
    connector app.timer => timer.timer
        
    instance deserializer : MessageDeserializer
    instance serializer : MessageSerializer
    instance serial : SerialJS
        set serial.serialPort = "COM27"
    
    connector deserializer.in => serial.read
    connector deserializer.RemoteControl => app.RemoteControlIn
    connector serializer.out => serial.write
    connector serializer.RemoteControl => app.RemoteControlOut
}*/
