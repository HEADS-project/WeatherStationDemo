import "../../../core/serializer.thingml"
import "../../../core/comm.thingml"
import "../../../core/_java/serializer.thingml"
import "../../../core/_java/serial.thingml"

import "../weatherAPI.thingml"


thing WeatherStationGUI includes RemoteMonitoringMsgs 
@mock "true"
{         
    provided port gui
    {
        sends changeDisplay
        receives temp, lux
    }  
}

thing WeatherStation includes RemoteMonitoringMsgs
{    
    
    required port gui @public "true" {
        receives changeDisplay
        sends temp, lux
    }
    
    provided port RemoteControlOut
    {
        sends changeDisplay
    }
    
    provided port RemoteControlIn 
    {
        receives temp, lux
    }
    
    
    statechart SensorsDisplayImpl init Process
   	{   		
       on entry do
        print("Weather station ready!")      
       end
       
       state Process {
           
         on entry do
           print("Weather station ready indeed")
         end
           
        internal event t : RemoteControlIn?temp
        action do
            print("Temperature is: " + t.temp)
            gui!temp(t.temp)
        end
        
        internal event l : RemoteControlIn?lux
        action do
            print("Light is: " + l.lux)
            gui!lux(l.lux)
        end
        
        internal event gui?changeDisplay
        action do
            print("Changing Display on Arduino")
            RemoteControlOut!changeDisplay()
        end            
       }
        
    }
   
}





//Generated by ThingML

thing fragment RemoteMsgs includes RemoteMonitoringMsgs{
//message remote_changeDisplay();//code=20
//message remote_turnOff();//code=22
//message report_light(t : UInt16);//code=11
//message remote_turnOn();//code=21
//message report_temperature(t : UInt16);//code=10
}

thing MessageSerializer includes SerializerJava, ArraySerializer, RemoteMsgs {
required port RemoteControl{
receives changeDisplay
}

statechart SerializerBehavior init Serialize {
    
    on entry do
        '' & buffer & ' = new byte[16];'//needed as Kevoree only uses the empty constructor
        print("Coder ready!")
    end
    
state Serialize{
        on entry print("Coder ready indeed!")
internal event m : RemoteControl?changeDisplay action
do
print("Serializing changeDisplay message")
setHeader(20, 0)
send()
end

}
}

}

thing MessageDeserializer includes DeserializerJava, ArraySerializer, RemoteMsgs {
required port RemoteControl{
sends temp, lux
}

function forward() do
index = DATA_POSITION
readonly var code : Byte = buffer[CODE_POSITION]
if (code == 10) do
deserializeRemote_temperature()
end
if (code == 11) do
deserializeRemote_light()
end
end

function deserializeRemote_temperature()
do
readonly var t : UInt16 = deserializeUInt16()
print("t: " + t)
RemoteControl!temp(t)
end

function deserializeRemote_light()
do
readonly var t : UInt16 = deserializeUInt16()
print("l: " + t)
RemoteControl!lux(t)
end


statechart receive init Idle {
    
        on entry do
        '' & buffer & ' = new byte[16];'//needed as Kevoree only uses the empty constructor
        print("Decoder ready!")
    end
    
state Idle {
    on entry do
        print("Decoder ready indeed!")
    end
    
internal event m : in?receive_bytes
action do
    print("byte[] received from serial. Will try to decode it!...")
    receive(m.b)  
end
}
}

}

//END Generated by ThingML





configuration JavaWeatherNode
@remote "app::.*::RemoteControl::.*"
{
    instance app : WeatherStation
    instance gui : WeatherStationGUI
        
    instance deserializer : MessageDeserializer
    instance serializer : MessageSerializer
    instance serial : SerialJava
        set serial.serialPort = "COM13"
    
    connector deserializer.in => serial.IOStream
    connector deserializer.RemoteControl => app.RemoteControlIn
    connector serializer.out => serial.IOStream
    connector serializer.RemoteControl => app.RemoteControlOut
    connector app.gui => gui.gui
}