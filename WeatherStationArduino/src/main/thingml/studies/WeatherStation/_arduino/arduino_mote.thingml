import "../../../hardware/devices/_arduino/lcd_screen_sensor_disp.thingml"
import "../../../hardware/bricks/_arduino/temperature_sensor.thingml"
import "../../../hardware/bricks/_arduino/light_sensor.thingml"
import "../../../hardware/bricks/_arduino/led.thingml"
import "../../../hardware/bricks/_arduino/button.thingml"


import "../../../core/serializer.thingml"
import "../../../core/_arduino/serializer.thingml"
import "../../../core/_arduino/comm.thingml"

import "../weatherAPI.thingml"

thing SensorsDisplay includes RemoteMonitoringMsgs,
LcdScreenMsgs, TimerClient,
TemperatureSensorClient, LightSensorClient,
LedClient, ButtonClient
{		
	readonly property tempDisplay : UInt8 = 0
    readonly property lightDisplay : UInt8 = 2
    
    property temp : UInt16
    property light : UInt16
    
    readonly property period : UInt16 = 30000
	
	required port Display @sync_send "true"
    {	
		sends initDisplay, refreshDisplay, setDisplay
	}

    provided port RemoteControl @sync_send "true"
    {
        sends temp, lux 
        receives changeDisplay
    }
	
   	statechart SensorsDisplayImpl init Temp
   	{
   		on entry do
        	Display!initDisplay (tempDisplay, "Temperature", "C", 25, 15, 40)  
            Display!initDisplay (lightDisplay, "Light", "", 0, 0, 1023)
        end
   	    
   	    internal event m : TemperatureSensor?temperature_value
        action do
            Display!refreshDisplay (tempDisplay, m.val)
            temp = m.val
        end
        
   	    internal event m : LightSensor?light_value
        action do
            Display!refreshDisplay (lightDisplay, m.val)
            light = m.val        
        end
                	
   	    state Temp
        {		
        	on entry do
                Display!setDisplay (tempDisplay)
                timer!timer_start(period)
            end
            
            on exit do
                Led!led_toggle()
                RemoteControl!temp(temp)
                Led!led_toggle()
            end
        	
        	transition switch -> Light
        	event Button?press
            event timer?timer_timeout
            event RemoteControl?changeDisplay
            action timer!timer_cancel()
        }
        
        
        state Light
        {		
        	on entry do
                Display!setDisplay (lightDisplay)
                timer!timer_start(period)
            end
        
           on exit do
                Led!led_toggle()
                RemoteControl!lux(light)
                Led!led_toggle()
            end  
        
        	transition switch -> Temp
        	event Button?press
            event timer?timer_timeout
            event RemoteControl?changeDisplay
            action timer!timer_cancel()
        }
        
   	}
   
}






//Generated by ThingML
thing MessageSerializer includes SerializerArduino, RemoteMonitoringMsgs {
required port RemoteControl{
receives temp, lux
}

statechart SerializerBehavior init Serialize {
state Serialize{
internal event m : RemoteControl?lux action
do
setHeader(11, lengthUInt16)
serializeUInt16(m.lux)
//serializeInteger(m.light)
send()
end

internal event m : RemoteControl?temp action
do
setHeader(10, lengthUInt16)
serializeUInt16(m.temp)
//serializeInteger(m.temp)
send()
end

}
}

}

thing MessageDeserializer includes DeserializerArduino, RemoteMonitoringMsgs {
required port RemoteControl{
sends changeDisplay
}

function forward() do
index = DATA_POSITION
readonly var code : Byte = buffer[CODE_POSITION]
if (code == 20) do
deserializeRemote_changeDisplay()
end
end

function deserializeRemote_changeDisplay()
do
RemoteControl!changeDisplay()
end

statechart receive init Idle {
state Idle {
on entry index = 0
transition -> ReceiveMessage event m : network?receive_byte
guard m.b == START_BYTE
}
state ReceiveMessage {
transition -> Escape event m : network?receive_byte
guard m.b == ESCAPE_BYTE
internal event m : network?receive_byte
guard not (m.b == ESCAPE_BYTE or m.b == STOP_BYTE)
action storeByte(m.b)
transition -> Idle event m : network?receive_byte
guard m.b == STOP_BYTE
action forward()
internal event m : network?receive_byte
guard m.b == START_BYTE // Should not happen with a reliable channel
action index = 0 // Reset if it happens (some bytes have been lost at some point)
}
state Escape {
transition receive -> ReceiveMessage
event m : network?receive_byte
action storeByte(m.b)
}
}

}


//END Generated by ThingML



configuration ArduinoNode
@remote "app::.*::RemoteControl::.*"
{
	// Light sensor configuration.
	group light_sensor : LightSensorArduino
		set light_sensor.io.analog_input.pin = AnalogPin:A_4

	// Temperature sensor configuration.
	group temp_sensor : TemperatureSensorArduino
		set temp_sensor.io.analog_input.pin = AnalogPin:A_3

	// Led device configuration.
	group led : LedArduino
		set led.io.digital_output.pin = DigitalPin:PIN_9
	
    // Button device configuration.
	group button : ButtonArduino
		set button.io.digital_input.pin = DigitalPin:PIN_8

    // Screen declaration.
	instance screen : LcdScreen

    // Application configuration.
	instance app : SensorsDisplay
    instance timer : TimerArduino
	connector app.Display => screen.Display
	connector app.TemperatureSensor => temp_sensor.temperature_sensor.TemperatureSensor
    connector app.LightSensor => light_sensor.light_sensor.LightSensor
    connector app.Button => button.button.Button
    connector app.Led => led.led.Led
    connector app.timer => timer.timer

    //Serialization
    instance serializer : MessageSerializer
    instance deserializer : MessageDeserializer
    instance network : SerialArduino
    connector serializer.network => network.IOStream
    connector serializer.RemoteControl => app.RemoteControl
    connector deserializer.network => network.IOStream
    connector deserializer.RemoteControl => app.RemoteControl
}
